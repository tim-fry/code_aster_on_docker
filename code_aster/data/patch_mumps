diff -ruN mumps/Makefile.inc.in mumps-with-parmetis-ptscotch/Makefile.inc.in
--- mumps/Makefile.inc.in	2018-06-05 19:18:25.422625800 +0200
+++ mumps-with-parmetis-ptscotch/Makefile.inc.in	2018-06-05 18:26:31.858388300 +0200
@@ -41,7 +41,7 @@
 # variable below); for both parallel and sequential analysis choose the second
 # line (remember to add -Dparmetis in the ORDERINGSF variable below)

-LMETIS    = ?LIBPATH? ?LIB_METIS? ?STLIB_METIS?
+LMETIS    = ?LIBPATH? ?LIB_PARMETIS? ?STLIB_PARMETIS? ?LIB_METIS? ?STLIB_METIS?
 #LMETIS    = -L$(LMETISDIR) -lparmetis -lmetis

 # The following variables will be used in the compilation process.
diff -ruN mumps/waftools/parmetis.py mumps-with-parmetis-ptscotch/waftools/parmetis.py
--- mumps/waftools/parmetis.py	1970-01-01 01:00:00.000000000 +0100
+++ mumps-with-parmetis-ptscotch/waftools/parmetis.py	2018-06-05 18:26:31.864387600 +0200
@@ -0,0 +1,100 @@
+# coding=utf-8
+
+import os.path as osp
+import re
+from functools import partial
+from waflib import Options, Configure, Logs, Utils, Errors
+
+def options(self):
+    group = self.add_option_group('Parmetis library options')
+    group.add_option('--disable-parmetis', action='store_false', default=None,
+                    dest='enable_parmetis', help='Disable PARMETIS support')
+    group.add_option('--enable-parmetis', action='store_true', default=None,
+                    dest='enable_parmetis', help='Force PARMETIS support')
+    group.add_option('--parmetis-libs', type='string', dest='parmetis_libs',
+                    default=None,
+                    help='parmetis librairies to use when linking')
+    group.add_option('--embed-parmetis', dest='embed_parmetis',
+                    default=False, action='store_true',
+                    help='Embed PARMETIS libraries as static library')
+
+def configure(self):
+    try:
+        self.check_parmetis()
+    except Errors.ConfigurationError:
+        self.define('_DISABLE_PARMETIS', 1)
+        self.undefine('HAVE_PARMETIS')
+        if self.options.enable_parmetis == True:
+            raise
+    else:
+        self.define('_HAVE_PARMETIS', 1)
+        self.define('HAVE_PARMETIS', 1)
+
+###############################################################################
+@Configure.conf
+def check_parmetis(self):
+    opts = self.options
+    if opts.enable_parmetis == False:
+        raise Errors.ConfigurationError('PARMETIS disabled')
+    if opts.parmetis_libs is None:
+        opts.parmetis_libs = 'parmetis'
+    if opts.parmetis_libs:
+        self.check_parmetis_libs()
+    self.check_parmetis_headers()
+    self.check_parmetis_version()
+
+@Configure.conf
+def check_parmetis_libs(self):
+    opts = self.options
+    check_parmetis = partial(self.check_cc, uselib_store='PARMETIS', mandatory=True)
+    if opts.embed_all or opts.embed_parmetis:
+        check = lambda lib: check_parmetis(stlib=lib)
+    else:
+        check = lambda lib: check_parmetis(lib=lib)
+    map(check, Utils.to_list(opts.parmetis_libs))
+
+@Configure.conf
+def check_parmetis_headers(self):
+    check = partial(self.check_cc, header_name='parmetis.h', uselib_store='PARMETIS', use='PARMETIS')
+    self.start_msg('Checking for header parmetis.h')
+    try:
+        if not check(mandatory=False):
+            if not check(includes=[osp.join(self.env.INCLUDEDIR, 'parmetis')], mandatory=False):
+                check(includes=[osp.join(self.env.OLDINCLUDEDIR, 'parmetis')], mandatory=True)
+    except:
+        self.end_msg('no', 'YELLOW')
+        raise
+    else:
+        self.end_msg('yes')
+
+@Configure.conf
+def check_parmetis_version(self):
+    fragment = r'''
+#include <stdio.h>
+#include <parmetis.h>
+#include <metis.h>
+int main(void){
+#if defined(PARMETIS_MAJOR_VERSION) && defined(PARMETIS_MINOR_VERSION) && defined(PARMETIS_SUBMINOR_VERSION)
+    printf("PARMETISVER: %d.%d.%d", PARMETIS_MAJOR_VERSION, PARMETIS_MINOR_VERSION, PARMETIS_SUBMINOR_VERSION);
+    return 0;
+#endif
+/* unexpected */
+    return 1;
+}'''
+    self.start_msg('Checking parmetis version')
+    try:
+        ret = self.check_cc(fragment=fragment, use='PARMETIS',
+                            mandatory=True, execute=True, define_ret=True)
+        mat5 = re.search('PARMETISVER: *(?P<vers>[0-9]+\.[0-9]+\.\w+)', ret)
+        vers = (mat5 and mat5.group('vers'))
+        major = int(vers.split('.')[0])
+        if major not in (4,):
+            self.end_msg('unsupported metis version: %s' % vers, 'RED')
+            raise Errors.ConfigurationError
+        if major == 4:
+            self.env.PARMETIS_ORDERING = 'parmetis'
+    except:
+        self.end_msg('can not get version', 'RED')
+        raise
+    else:
+        self.end_msg(vers)
diff -ruN mumps/wscript mumps-with-parmetis-ptscotch/wscript
--- mumps/wscript	2018-06-05 19:18:25.432286700 +0200
+++ mumps-with-parmetis-ptscotch/wscript	2018-06-05 18:32:16.369572100 +0200
@@ -46,6 +46,7 @@
     self.load('parallel', tooldir='waftools')
     self.load('mathematics', tooldir='waftools')
     self.load('metis', tooldir='waftools')
+    self.load('parmetis', tooldir='waftools')
     self.load('scotch', tooldir='waftools')

     group.add_option('-E', '--embed-all', dest='embed_all',
@@ -82,6 +83,8 @@
     self.load('parallel', tooldir='waftools')
     self.load('mathematics', tooldir='waftools')
     self.load('metis', tooldir='waftools')
+    if self.env.HAVE_MPI:
+        self.load('parmetis', tooldir='waftools')
     self.load('scotch', tooldir='waftools')

     self.check_linkflags()
@@ -102,8 +105,14 @@
     if self.env.LIB_METIS:
         self.env.append_unique('ORDERINGS', [self.env.METIS_ORDERING])
         self.env.append_unique('DEFINES', [self.env.METIS_ORDERING])
+    if self.env.HAVE_MPI:
+        if self.env.LIB_PARMETIS:
+            self.env.append_unique('ORDERINGS', [self.env.PARMETIS_ORDERING])
+            self.env.append_unique('DEFINES', [self.env.PARMETIS_ORDERING])
     if self.env.LIB_SCOTCH:
         self.env.append_value('ORDERINGS', 'scotch')
+        if self.env.HAVE_MPI:
+            self.env.append_value('ORDERINGS', 'ptscotch')

 @Configure.conf
 def check_cflags(self):
@@ -158,8 +167,8 @@
                   'CC', 'CFLAGS', 'FC', 'FCFLAGS', 'FCFLAGS_OPENMP',
                   'LINK_FC', 'LINKFLAGS', 'LINKFLAGS_OPENMP', 'LINKFLAGS_CLIB',
                   'LIBPATH',
-                  'LIB_SCOTCH', 'LIB_METIS', 'LIB_MATH', 'LIB_SYS',
-                  'STLIB_SCOTCH', 'STLIB_METIS', 'STLIB_MATH', 'STLIB_SYS',
+                  'LIB_SCOTCH', 'LIB_METIS', 'LIB_PARMETIS', 'LIB_MATH', 'LIB_SYS',
+                  'STLIB_SCOTCH', 'STLIB_METIS', 'STLIB_PARMETIS', 'STLIB_MATH', 'STLIB_SYS',
                   'OPTLIB_FLAGS', 'OPTLIB_FLAGS_MATH',
                   # Makefile variables
                   'INCS', 'LIBS', 'LIB_SCALAPACK',
